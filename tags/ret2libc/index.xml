<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ret2libc on AlrikRr&#39;s Blog</title>
    <link>https://AlrikRr.github.io/tags/ret2libc/</link>
    <description>Recent content in ret2libc on AlrikRr&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://AlrikRr.github.io/tags/ret2libc/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>#3 ret2libc exploit 32-bit linux</title>
      <link>https://AlrikRr.github.io/posts/reverse-engineering/binary-exploitation/ret-2-libc/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://AlrikRr.github.io/posts/reverse-engineering/binary-exploitation/ret-2-libc/</guid>
      <description>ret2libc ? This is a flaw that we will exploit on a binary that has the NX (non-executable) protection enabled.
There are several ways to bypass this protection (ROP, ret2plt, etc&amp;hellip;) but here we will focus on ret2libc.
In our program, the stack is not executable but the libc contains many interesting functions and it is executable.
The idea is to go look for the functions that interest us in order to build an exploit.</description>
    </item>
    
    
  </channel>
</rss>
